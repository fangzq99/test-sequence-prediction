import { uuid } from 'uuidv4'
import * as robotCreate from '../../../../support/Automation Tests Commands/Robot Commands/robotCreateCommands.js'
import { deleteAutoGeneratedRobots } from '../../../../support/generalCommands.js'
import { baseURL, robotFamilyTypes } from '../../../../support/Region Constants/constants.js'
import { robotCreateUsers } from '../../../../support/Region Constants/userPrivileges.js'


context('Robot tests (Create)', () => {
    robotCreateUsers.forEach(user => {
        context(user.role, () => {
            beforeEach(() => {
                robotCreate.robotCreateBeforeEach(baseURL, user.username, user.password, user.role)
            })
            it("Bulk create Rex scrub", () => {
                let uuidAutoGenRexArray = []
                for (let i = 0; i < 2; i++) {
                    uuidAutoGenRexArray.push('AutoGenRexScrub' + uuid())
                }
                cy.task('log', 'Created an array of robots to create: ' + uuidAutoGenRexArray)

                robotCreate.createSameFamilyRobots(robotFamilyTypes['rex']['familyName'], robotFamilyTypes['rex']['types']['scrub'], uuidAutoGenRexArray)

                deleteAutoGeneratedRobots(user.role, uuidAutoGenRexArray)
            })
            it("Bulk create Rex combi", () => {
                let uuidAutoGenR3Array = []
                for (let i = 0; i < 2; i++) {
                    uuidAutoGenR3Array.push('AutoGenRexCombi' + uuid())
                }
                cy.task('log', 'Created an array of robots to create: ' + uuidAutoGenR3Array)

                robotCreate.createSameFamilyRobots(robotFamilyTypes['rex']['familyName'], robotFamilyTypes['rex']['types']['combi'], uuidAutoGenR3Array)

                deleteAutoGeneratedRobots(user.role, uuidAutoGenR3Array)
            })
        })
    })
})
