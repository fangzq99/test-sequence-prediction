import { uuid } from 'uuidv4'
import * as robotCreate from '../../../../support/Automation Tests Commands/Robot Commands/robotCreateCommands.js'
import { deleteAutoGeneratedRobots } from '../../../../support/generalCommands.js'
import { baseURL, robotFamilyTypes } from '../../../../support/Region Constants/constants.js'
import { robotCreateUsers } from '../../../../support/Region Constants/userPrivileges.js'


context('Robot tests (Create)', () => {
    robotCreateUsers.forEach(user => {
        context(user.role, () => {
            beforeEach(() => {
                robotCreate.robotCreateBeforeEach(baseURL, user.username, user.password, user.role)
            })
            it("Bulk create R3 scrub", () => {
                let uuidAutoGenR3Array = []
                for (let i = 0; i < 2; i++) {
                    uuidAutoGenR3Array.push('AutoGenR3Scrub' + uuid())
                }
                cy.task('log', 'Created an array of robots to create: ' + uuidAutoGenR3Array)

                robotCreate.createSameFamilyRobots(robotFamilyTypes['r3']['familyName'], robotFamilyTypes['r3']['types']['scrub'], uuidAutoGenR3Array)

                deleteAutoGeneratedRobots(user.role, uuidAutoGenR3Array)
            })
            // it("Bulk create R3 vac", () => {
            //     let uuidAutoGenR3Array = []
            //     for (let i = 0; i < 2; i++) {
            //         uuidAutoGenR3Array.push('AutoGenRobot' + uuid())
            //     }
            //     cy.task('log', 'Created an array of robots to create: ' + uuidAutoGenR3Array)

            //     robotCreate.createSameFamilyRobots(robotFamilyTypes['r3']['familyName'], robotFamilyTypes['r3']['types']['combi'], uuidAutoGenR3Array)

            //     robotCreate.deleteAutoGeneratedRobots(user.role, uuidAutoGenR3Array.length)
            // })
        })
    })
})
